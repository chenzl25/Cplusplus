require("./qsort.code");
function Buffer(buffer_size_, disk_) {
    this = Object();
    this.arr = Array();
    this.buffer_size = buffer_size_;
    this.disk = disk_;
    this.disk_file_index = null;
    this.add = closure(number) {
        this.arr.push(number);
    };
    this.peek = closure() {
        this.arr[this.size-1];
    };
    this.pop = closure() {
        if (this.isEmpty()) {
            print("error in Buffer pop when empty");
        }
        return this.arr.pop();
    };
    this.isFull = closure() {
        return this.arr.size() == this.buffer_size;
    };
    this.isEmpty = closure() {
        if (this.arr.size() > 0) {
            return false;
        } 

        if (this.disk.file[this.disk_file_index].size()) {
            return true;
        } else {
            while (this.arr.size() < this.buffer_size && this.disk.file[this.disk_file_index].size()) {
                this.arr.push(this.disk.file[this.disk_file_index].erase(0));
            }
        }
        return false;
    };
    this.print = closure() {
        print("Buffer:\n");
        print(this.arr);
        print("\n");
    };
    this.sort = closure() {
        qsort(this.arr, 0, this.arr.size()-1);
    };
    return this;
}


function Disk(file_num_) {
    this = Object();
    this.file_num = file_num_;
    this.file = Array(this.file_num);
    this.temp_file = Array(this.file_num);
    this.index = 0;
    for (i = 0; i < this.file_num; i++) {
        this.file[i] = Array();
        this.temp_file = Array(this.file_num);
    }
    this.next = closure() {
        this.index++;
    };
    this.add = closure(number) {
        this.file[this.index].push(number);
    };
    this.swap = closure() {
        this.file = this.temp_file;
        this.temp_file = Array(this.file_num);
        for (i = 0; i < this.file_num; i++) {
            this.temp_file = Array(this.file_num);
        }
    };
    return this;
}



arr_size = 10000;
buffer_num = 5;         # buffer_size-1 input 1 output 
buffer_capacity = 50;   # can store 50 number
to_sort_array = Array(arr_size);
for (i = 0; i < arr_size; i++) {
    to_sort_array[i] = Math.random() * 10000;
}

disk = Disk(arr_size / buffer_capacity / (buffer_num - 1) );   # 40


output_buffer = Buffer(buffer_capacity, disk);

input_buffers = Array(buffer_num-1);
for (i = 0; i < input_buffers.size(); i++) {
    input_buffers[i] = Buffer(buffer_capacity, disk);
}

# PASS 0
runs = (arr_size / buffer_capacity / buffer_num);
for (i = 0; i < runs; i++) {
    for (j = 0; j < input_buffers.size(); j++) {
        while (!input_buffers[j].isFull()) {
            input_buffers[j].add(to_sort_array.pop());
        }
        input_buffers[j].sort();
        input_buffers[j].print();
    }
    break;
}





