# -----------------------------------------------------------------
# union have default : type int_value, double_value, string_value
# token have default : <double_value> factor , <int_value>  number
# -----------------------------------------------------------------


%include {
  #include "../../extend/create.h"
  #include "../../extend/CRB.h"
}

%union {
    // int              int_value;
    // double           double_value;
    // string           *string_value;
    ParameterList       *parameter_list;
    ArgumentList        *argument_list;
    Expression          *expression;
    ExpressionList      *expression_list;
    Statement           *statement;
    StatementList       *statement_list;
    Block               *block;
    ElsifList           *elsif_list;
    Elsif               *elsif;
    IdentifierList      *identifier_list;
}

%token string identifier  

# ----------------------------------------
%token <double_value> factor
%token <int_value>    number
%token <string_value> string identifier
# ----------------------------------------


%type   <parameter_list> parameter_list
%type   <argument_list> argument_list
%type   <expression> expression expression_opt logical_and_expression logical_or_expression equality_expression relational_expression additive_expression multiplicative_expression unary_expression postfix_expression primary_expression array_literal closure_definition assignment_expression
%type   <expression_list> expression_list
%type   <statement> statement global_statement if_statement while_statement for_statement return_statement break_statement continue_statement
%type   <statement_list> statement_list
%type   <block> block
%type   <elsif> elsif_ 
%type   <elsif_list> elsif_list
%type   <identifier_list> identifier_list 


$ translation_unit : definition_or_statement
        | translation_unit definition_or_statement
        ;
$ definition_or_statement : function_definition
        | statement
        {
            CRB::Interpreter *inter = CRB::Interpreter::getInstance();
            inter->chain_statement_list($1);
        }
        ;
$ function_definition : 'function' identifier '(' parameter_list ')' block
        {
            crb_function_define($2, $4, $6);
        }
        | 'function' identifier '(' ')' block
        {
            crb_function_define($2, NULL, $5);
        }
        ;
$ parameter_list : identifier
        {
            $$ = crb_create_parameter_list($1);
        }
        | parameter_list ',' identifier
        {
            $$ = crb_chain_parameter_list($1, $3);
        }
        ;
$ argument_list : assignment_expression
        {
            $$ = crb_create_argument_list($1);
        }
        | argument_list ',' assignment_expression
        {
            $$ = crb_chain_argument_list($1, $3);
        }
        ;
$ statement_list : statement
        {
            $$ = crb_create_statement_list($1);
        }
        | statement_list statement
        {
            $$ = crb_chain_statement_list($1, $2);
        }
        ;
$ expression : assignment_expression
        | expression ',' assignment_expression
        {
            $$ = crb_create_comma_expression($1, $3);
        }
        ;
$ assignment_expression : logical_or_expression
        | postfix_expression '=' assignment_expression
        {
            $$ = crb_create_assign_expression(CRB_TYPE::NORMAL_ASSIGN_EXPRESSION ,$1, $3);
        }
        | postfix_expression '+=' assignment_expression
        {
            $$ = crb_create_assign_expression(CRB_TYPE::ADD_ASSIGN_EXPRESSION ,$1, $3);
        }
        | postfix_expression '-=' assignment_expression
        {
            $$ = crb_create_assign_expression(CRB_TYPE::SUB_ASSIGN_EXPRESSION ,$1, $3);
        }
        | postfix_expression '*=' assignment_expression
        {
            $$ = crb_create_assign_expression(CRB_TYPE::MUL_ASSIGN_EXPRESSION ,$1, $3);
        }
        | postfix_expression '/=' assignment_expression
        {
            $$ = crb_create_assign_expression(CRB_TYPE::DIV_ASSIGN_EXPRESSION ,$1, $3);
        }
        | postfix_expression '%=' assignment_expression
        {
            $$ = crb_create_assign_expression(CRB_TYPE::MOD_ASSIGN_EXPRESSION ,$1, $3);
        }
        ;
$ logical_or_expression : logical_and_expression
        | logical_or_expression '||' logical_and_expression
        {
            $$ = crb_create_binary_expression(CRB_TYPE::LOGICAL_OR_EXPRESSION, $1, $3);
        }
        ;
$ logical_and_expression : equality_expression
        | logical_and_expression '&&' equality_expression
        {
            $$ = crb_create_binary_expression(CRB_TYPE::LOGICAL_AND_EXPRESSION, $1, $3);
        }
        ;
$ equality_expression : relational_expression
        | equality_expression '==' relational_expression
        {
            $$ = crb_create_binary_expression(CRB_TYPE::EQ_EXPRESSION, $1, $3);
        }
        | equality_expression '!=' relational_expression
        {
            $$ = crb_create_binary_expression(CRB_TYPE::NE_EXPRESSION, $1, $3);
        }
        ;
$ relational_expression : additive_expression
        | relational_expression '>' additive_expression
        {
            $$ = crb_create_binary_expression(CRB_TYPE::GT_EXPRESSION, $1, $3);
        }
        | relational_expression '>=' additive_expression
        {
            $$ = crb_create_binary_expression(CRB_TYPE::GE_EXPRESSION, $1, $3);
        }
        | relational_expression '<=' additive_expression
        {
            $$ = crb_create_binary_expression(CRB_TYPE::LE_EXPRESSION, $1, $3);
        }
        | relational_expression '<' additive_expression
        {
            $$ = crb_create_binary_expression(CRB_TYPE::LT_EXPRESSION, $1, $3);
        }
        ;
$ additive_expression : multiplicative_expression
        | additive_expression '+' multiplicative_expression
        {
            $$ = crb_create_binary_expression(CRB_TYPE::ADD_EXPRESSION, $1, $3);
        }
        | additive_expression '-' multiplicative_expression
        {
            $$ = crb_create_binary_expression(CRB_TYPE::SUB_EXPRESSION, $1, $3);
        }
        ;
$ multiplicative_expression : unary_expression
        | multiplicative_expression '*' unary_expression
        {
            $$ = crb_create_binary_expression(CRB_TYPE::MUL_EXPRESSION, $1, $3);
        }
        | multiplicative_expression '/' unary_expression
        {
            $$ = crb_create_binary_expression(CRB_TYPE::DIV_EXPRESSION, $1, $3);
        }
        | multiplicative_expression '%' unary_expression
        {
            $$ = crb_create_binary_expression(CRB_TYPE::MOD_EXPRESSION, $1, $3);
        }
        ;
$ unary_expression : postfix_expression
        | '-' unary_expression
        {
            $$ = crb_create_minus_expression($2);
        }
        | '!' unary_expression
        {
            $$ = crb_create_logical_not_expression($2);
        }
        ;
$ postfix_expression : primary_expression
        | postfix_expression '[' expression ']'
        {
            $$ = crb_create_index_expression($1, $3);
        }
        | postfix_expression '.' identifier
        {
            $$ = crb_create_member_expression($1, $3);
        }
        | postfix_expression '(' argument_list ')'
        {
            $$ = crb_create_function_call_expression($1, $3);
        }
        | postfix_expression '(' ')'
        {
            $$ = crb_create_function_call_expression($1, NULL);
        }
        | postfix_expression '++'
        {
            $$ = crb_create_incdec_expression($1, CRB_TYPE::INCREMENT_EXPRESSION);
        }
        | postfix_expression '--'
        {
            $$ = crb_create_incdec_expression($1, CRB_TYPE::DECREMENT_EXPRESSION);
        }
        ;

$ primary_expression : '(' expression ')'
        {
            $$ = $2;
        }
        | identifier
        {
            $$ = crb_create_identifier_expression($1);
        }
        | number
        {
            $$ = crb_create_int_expression($1);
        }
        | factor
        {
            $$ = crb_create_double_expression($1);
        }
        | string
        {
            $$ = crb_create_string_expression($1);
        }
        | 'true'
        {
            $$ = crb_create_boolean_expression(true);
        }
        | 'false'
        {
            $$ = crb_create_boolean_expression(false);
        }
        | 'null'
        {
            $$ = crb_create_null_expression();
        }
        | array_literal
        | closure_definition
        ;
$ array_literal : '{' expression_list '}'
        {
            $$ = crb_create_array_expression($2);
        }
        | '{' expression_list ':' '}'
        {
            $$ = crb_create_array_expression($2);
        }
        ;
$ closure_definition : 'closure' identifier '(' parameter_list ')' block
        {
            $$ = crb_create_closure_definition($2, $4, $6);
        }
        | 'closure' identifier '(' ')' block
        {
            $$ = crb_create_closure_definition($2, NULL, $5);
        }
        | 'closure' '(' parameter_list ')' block
        {
            $$ = crb_create_closure_definition(NULL, $3, $5);
        }
        | 'closure' '(' ')' block
        {
            $$ = crb_create_closure_definition(NULL, NULL, $4);
        }
        ;
$ expression_list : 
        {
            $$ = NULL;
        }
        | expression
        {
            $$ = crb_create_expression_list($1);
        }
        | expression_list ':' expression
        {
            $$ = crb_chain_expression_list($1, $3);
        }
        ;
$ statement : expression ';'
        {
          $$ = crb_create_expression_statement($1);
        }
        | global_statement
        | if_statement
        | while_statement
        | for_statement
        | return_statement
        | break_statement
        | continue_statement
        ;
$ global_statement : 'global' identifier_list ';'
        {
            $$ = crb_create_global_statement($2);
        }
        ;
$ identifier_list : identifier
        {
            $$ = crb_create_global_identifier_list($1);
        }
        | identifier_list ',' identifier
        {
            $$ = crb_chain_identifier_list($1, $3);
        }
        ;
$ if_statement : 'if' '(' expression ')' block
        {
            $$ = crb_create_if_statement($3, $5, NULL, NULL);
        }
        | 'if' '(' expression ')' block 'else' block
        {
            $$ = crb_create_if_statement($3, $5, NULL, $7);
        }
        | 'if' '(' expression ')' block elsif_list
        {
            $$ = crb_create_if_statement($3, $5, $6, NULL);
        }
        | 'if' '(' expression ')' block elsif_list 'else' block
        {
            $$ = crb_create_if_statement($3, $5, $6, $8);
        }
        ;
$ elsif_list : elsif_
        {
            $$ = crb_create_elsif_list($1);
        }
        | elsif_list elsif_
        {
            $$ = crb_chain_elsif_list($1, $2);
        }
        ;
$ elsif_ : 'elsif' '(' expression ')' block
        {
            $$ = crb_create_elsif($3, $5);
        }
        ;
$ while_statement : 'while' '(' expression ')' block
        {
                $$ = crb_create_while_statement($3, $5);
        }
        ;
$ for_statement : 'for' '(' expression_opt ';' expression_opt ';' expression_opt ')' block
        {
            $$ = crb_create_for_statement($3, $5, $7, $9);
        }
        ;
$ expression_opt : 
        {
            $$ = NULL;
        }
        | expression
        ;
$ return_statement : 'return' expression_opt ';'
        {
            $$ = crb_create_return_statement($2);
        }
        ;
$ break_statement : 'break' ';'
        {
            $$ = crb_create_break_statement();
        }
        ;
$ continue_statement : 'continue' ';'
        {
            $$ = crb_create_continue_statement();
        }
        ;
$ block : '{' statement_list '}'
        {
            $$ = crb_create_block($2);
        }
        | '{' '}'
        {
            $$ = crb_create_block(NULL);
        }
        ;
