#include <iostream>
#include <fstream>
#include <cstring>
#include <string>
#include <vector>
#include "../../lexer/src/lex.h"
#include "yacc.h"
#include "slr.h"
#include "bnf_rule.h"
using namespace std;
vector<Lex::LexRule> hard_code_lex_rule();
vector<BnfRule> hard_code_bnf_rule();
int main(int argc, char** argv) {
  string lex_rule_path = "data/cal.lex";
  string code_path     = "data/cal.code";
  string bnf_rule_path = "data/cal.bnf";
  for (int i = 1; i < argc;) {
    if (strcmp(argv[i],"-lex") == 0) {
      lex_rule_path = argv[i+1];
      i+=2;
    } else if (strcmp(argv[i], "-bnf") == 0) {
      bnf_rule_path = argv[i+1];
      i+=2;
    } else if (strcmp(argv[i], "-code") == 0) {
      code_path = argv[i+1];
      i+=2;
    } else {
      i++;
    }
  } 
  Lex mylex;
  mylex.build_from_lex_rules(hard_code_lex_rule());
  /*set-string-type-distincter*/
  if (!mylex.read_code(code_path)) {
    error("read code_file error");
  }
  mylex.set_max_token_size(50);

  SLR slr;
  slr.build_from_bnf_rules(hard_code_bnf_rule());
  slr.parse(mylex);
}

vector<Lex::LexRule> hard_code_lex_rule() {
  /*hard_code_lex_rule*/
}
vector<BnfRule> hard_code_bnf_rule() {
  /*hard_code_bnf_rule*/
}